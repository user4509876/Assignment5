class Game1:
    def __init__(x, n):
        x.n = n
        x.directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] 

    def valid(self, x, y, grid, snake):
        return 0 <= x < self.n and 0 <= y < self.n and (x, y) not in snake

    def full(self, snake):
        return len(snake) == self.n **2

    def direction(a, x, y, grid, snake):
        if a.full(snake):
            return 1  
        total = 0
        for dx, dy in a.directions:
            x1, y1 = x + dx, y + dy
            if a.valid(x1, y1, grid, snake):
                snake.append((x1, y1))
                grid[x1][y1] = True
                total += a.direction(x1, y1, grid, snake)
                snake.pop()
                grid[x1][y1] = False

        return total

    def total1(a):
        total= 0
        for x0 in range(a.n):
            for y0 in range(a.n):
                grid = [[False] * a.n for _ in range(a.n)]
                snake = [(x0, y0)]
                grid[x0][y0] = True
                total += a.direction(x0, y0, grid, snake)
        return total

if __name__ == "__main__":
    for n in range(1,6):
        game = Game1(n)
        total_ways = game.total1()
        print(f"Size of Grid (n): {n}, Total number of Winning Games: {total_ways}")
